{
  "SchemaVersion": 2,
  "ArtifactName": "celestia-node_v0.6.4",
  "ArtifactType": "container_image",
  "Metadata": {
    "ImageID": "sha256:602ef594c428d71729aff6d28c1cd5f4bad7c8ca60946a65e0f5cd6d58ece1a6",
    "DiffIDs": [
      "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
    ],
    "ImageConfig": {
      "architecture": "amd64",
      "created": "2023-02-08T09:50:09.260485279Z",
      "history": [
        {
          "created": "2023-02-08T09:50:09.260485279Z",
          "created_by": "COPY /bin/celestia /bin/celestia # buildkit",
          "comment": "buildkit.dockerfile.v0"
        }
      ],
      "os": "linux",
      "rootfs": {
        "type": "layers",
        "diff_ids": [
          "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
        ]
      },
      "config": {
        "Env": [
          "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
        ],
        "WorkingDir": "/"
      }
    }
  },
  "Results": [
    {
      "Target": "bin/celestia",
      "Class": "lang-pkgs",
      "Type": "gobinary",
      "Vulnerabilities": [
        {
          "VulnerabilityID": "CVE-2020-8911",
          "PkgName": "github.com/aws/aws-sdk-go",
          "InstalledVersion": "v1.40.45",
          "Layer": {
            "Digest": "sha256:3c600c06712f7dc77ccb68af1d7671303854c7a1094eb3b39db610d02688dde4",
            "DiffID": "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
          },
          "SeveritySource": "nvd",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2020-8911",
          "DataSource": {
            "ID": "go-vulndb",
            "Name": "The Go Vulnerability Database",
            "URL": "https://github.com/golang/vulndb"
          },
          "Title": "aws/aws-sdk-go: CBC padding oracle issue in AWS S3 Crypto SDK for golang",
          "Description": "A padding oracle vulnerability exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. The SDK allows users to encrypt files with AES-CBC without computing a Message Authentication Code (MAC), which then allows an attacker who has write access to the target's S3 bucket and can observe whether or not an endpoint with access to the key can decrypt a file, they can reconstruct the plaintext with (on average) 128*length (plaintext) queries to the endpoint, by exploiting CBC's ability to manipulate the bytes of the next block and PKCS5 padding errors. It is recommended to update your SDK to V2 or later, and re-encrypt your files.",
          "Severity": "MEDIUM",
          "CweIDs": [
            "CWE-327"
          ],
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N",
              "V3Score": 5.6
            },
            "nvd": {
              "V2Vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
              "V3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N",
              "V2Score": 2.1,
              "V3Score": 5.6
            },
            "redhat": {
              "V3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:C/C:H/I:N/A:N",
              "V3Score": 5.6
            }
          },
          "References": [
            "https://access.redhat.com/security/cve/CVE-2020-8911",
            "https://aws.amazon.com/blogs/developer/updates-to-the-amazon-s3-encryption-client/?s=09",
            "https://bugzilla.redhat.com/show_bug.cgi?id=1869800",
            "https://github.com/advisories/GHSA-f5pg-7wfw-84q9",
            "https://github.com/aws/aws-sdk-go/commit/1e84382fa1c0086362b5a4b68e068d4f8518d40e",
            "https://github.com/aws/aws-sdk-go/commit/ae9b9fd92af132cfd8d879809d8611825ba135f4",
            "https://github.com/aws/aws-sdk-go/pull/3403",
            "https://github.com/google/security-research/security/advisories/GHSA-f5pg-7wfw-84q9",
            "https://github.com/sophieschmieg/exploits/tree/master/aws_s3_crypto_poc",
            "https://nvd.nist.gov/vuln/detail/CVE-2020-8911",
            "https://pkg.go.dev/vuln/GO-2022-0646"
          ],
          "PublishedDate": "2020-08-11T20:15:00Z",
          "LastModifiedDate": "2020-08-18T13:37:00Z"
        },
        {
          "VulnerabilityID": "CVE-2020-8912",
          "PkgName": "github.com/aws/aws-sdk-go",
          "InstalledVersion": "v1.40.45",
          "Layer": {
            "Digest": "sha256:3c600c06712f7dc77ccb68af1d7671303854c7a1094eb3b39db610d02688dde4",
            "DiffID": "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
          },
          "SeveritySource": "nvd",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2020-8912",
          "DataSource": {
            "ID": "go-vulndb",
            "Name": "The Go Vulnerability Database",
            "URL": "https://github.com/golang/vulndb"
          },
          "Title": "aws-sdk-go: In-band key negotiation issue in AWS S3 Crypto SDK for golang",
          "Description": "A vulnerability in the in-band key negotiation exists in the AWS S3 Crypto SDK for GoLang versions prior to V2. An attacker with write access to the targeted bucket can change the encryption algorithm of an object in the bucket, which can then allow them to change AES-GCM to AES-CTR. Using this in combination with a decryption oracle can reveal the authentication key used by AES-GCM as decrypting the GMAC tag leaves the authentication key recoverable as an algebraic equation. It is recommended to update your SDK to V2 or later, and re-encrypt your files.",
          "Severity": "LOW",
          "CweIDs": [
            "CWE-327"
          ],
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
              "V3Score": 2.5
            },
            "nvd": {
              "V2Vector": "AV:L/AC:L/Au:N/C:P/I:N/A:N",
              "V3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
              "V2Score": 2.1,
              "V3Score": 2.5
            },
            "redhat": {
              "V3Vector": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:L/I:N/A:N",
              "V3Score": 2.5
            }
          },
          "References": [
            "https://access.redhat.com/security/cve/CVE-2020-8912",
            "https://aws.amazon.com/blogs/developer/updates-to-the-amazon-s3-encryption-client/?s=09",
            "https://bugzilla.redhat.com/show_bug.cgi?id=1869801",
            "https://github.com/advisories/GHSA-7f33-f4f5-xwgw",
            "https://github.com/aws/aws-sdk-go/commit/1e84382fa1c0086362b5a4b68e068d4f8518d40e",
            "https://github.com/aws/aws-sdk-go/commit/ae9b9fd92af132cfd8d879809d8611825ba135f4",
            "https://github.com/aws/aws-sdk-go/pull/3403",
            "https://github.com/google/security-research/security/advisories/GHSA-7f33-f4f5-xwgw",
            "https://github.com/sophieschmieg/exploits/tree/master/aws_s3_crypto_poc",
            "https://nvd.nist.gov/vuln/detail/CVE-2020-8912",
            "https://pkg.go.dev/vuln/GO-2022-0646"
          ],
          "PublishedDate": "2020-08-11T20:15:00Z",
          "LastModifiedDate": "2020-08-17T19:31:00Z"
        },
        {
          "VulnerabilityID": "CVE-2022-44797",
          "PkgName": "github.com/btcsuite/btcd",
          "InstalledVersion": "v0.22.1",
          "FixedVersion": "0.23.2",
          "Layer": {
            "Digest": "sha256:3c600c06712f7dc77ccb68af1d7671303854c7a1094eb3b39db610d02688dde4",
            "DiffID": "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
          },
          "SeveritySource": "nvd",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2022-44797",
          "DataSource": {
            "ID": "go-vulndb",
            "Name": "The Go Vulnerability Database",
            "URL": "https://github.com/golang/vulndb"
          },
          "Title": "btcd mishandles witness size checking",
          "Description": "btcd before 0.23.2, as used in Lightning Labs lnd before 0.15.2-beta and other Bitcoin-related products, mishandles witness size checking.",
          "Severity": "CRITICAL",
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "V3Score": 9.8
            },
            "nvd": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
              "V3Score": 9.8
            }
          },
          "References": [
            "https://github.com/advisories/GHSA-2chg-86hq-7w38",
            "https://github.com/btcsuite/btcd/pull/1896",
            "https://github.com/btcsuite/btcd/pull/1896/commits/f523d4ccaa5f34a2f761f16a05f5d6e6665b1168",
            "https://github.com/btcsuite/btcd/releases/tag/v0.23.2",
            "https://github.com/lightningnetwork/lnd/issues/7002",
            "https://github.com/lightningnetwork/lnd/releases/tag/v0.15.2-beta",
            "https://nvd.nist.gov/vuln/detail/CVE-2022-44797",
            "https://pkg.go.dev/vuln/GO-2022-1098"
          ],
          "PublishedDate": "2022-11-07T04:15:00Z",
          "LastModifiedDate": "2022-11-14T18:25:00Z"
        },
        {
          "VulnerabilityID": "CVE-2022-23328",
          "PkgName": "github.com/ethereum/go-ethereum",
          "InstalledVersion": "v1.10.17",
          "Layer": {
            "Digest": "sha256:3c600c06712f7dc77ccb68af1d7671303854c7a1094eb3b39db610d02688dde4",
            "DiffID": "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
          },
          "SeveritySource": "nvd",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2022-23328",
          "DataSource": {
            "ID": "glad",
            "Name": "GitLab Advisory Database Community",
            "URL": "https://gitlab.com/gitlab-org/advisories-community"
          },
          "Title": "Denial of Service in Go-Ethereum",
          "Description": "A design flaw in all versions of Go-Ethereum allows an attacker node to send 5120 pending transactions of a high gas price from one account that all fully spend the full balance of the account to a victim Geth node, which can purge all of pending transactions in a victim node's memory pool and then occupy the memory pool to prevent new transactions from entering the pool, resulting in a denial of service (DoS).",
          "Severity": "HIGH",
          "CweIDs": [
            "CWE-400"
          ],
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "V3Score": 7.5
            },
            "nvd": {
              "V2Vector": "AV:N/AC:L/Au:N/C:N/I:N/A:P",
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "V2Score": 5,
              "V3Score": 7.5
            }
          },
          "References": [
            "http://ethereum.com",
            "http://go-ethereum.com",
            "https://dl.acm.org/doi/pdf/10.1145/3460120.3485369",
            "https://github.com/advisories/GHSA-vmf7-hmh6-vv57",
            "https://nvd.nist.gov/vuln/detail/CVE-2022-23328",
            "https://tristartom.github.io/docs/ccs21.pdf"
          ],
          "PublishedDate": "2022-03-04T12:15:00Z",
          "LastModifiedDate": "2022-03-17T15:39:00Z"
        },
        {
          "VulnerabilityID": "CVE-2022-37450",
          "PkgName": "github.com/ethereum/go-ethereum",
          "InstalledVersion": "v1.10.17",
          "Layer": {
            "Digest": "sha256:3c600c06712f7dc77ccb68af1d7671303854c7a1094eb3b39db610d02688dde4",
            "DiffID": "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
          },
          "SeveritySource": "nvd",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2022-37450",
          "DataSource": {
            "ID": "glad",
            "Name": "GitLab Advisory Database Community",
            "URL": "https://gitlab.com/gitlab-org/advisories-community"
          },
          "Title": "Go Ethereum allows attackers to use manipulation of time-difference values to achieve replacement of main-chain blocks",
          "Description": "Go Ethereum (aka geth) through 1.10.21 allows attackers to increase rewards by mining blocks in certain situations, and using a manipulation of time-difference values to achieve replacement of main-chain blocks, aka Riskless Uncle Making (RUM), as exploited in the wild in 2020 through 2022.",
          "Severity": "MEDIUM",
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
              "V3Score": 5.9
            },
            "nvd": {
              "V3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:N",
              "V3Score": 5.9
            }
          },
          "References": [
            "http://dx.doi.org/10.13140/RG.2.2.27813.99043",
            "https://github.com/advisories/GHSA-rqmg-hrg4-fm69",
            "https://github.com/ethereum/go-ethereum/blob/671094279e8d27f4b4c3c94bf8b636c26b473976/core/forkchoice.go#L91-L94",
            "https://medium.com/@aviv.yaish/uncle-maker-time-stamping-out-the-competition-in-ethereum-d27c1cb62fef",
            "https://news.ycombinator.com/item?id=32354896",
            "https://nvd.nist.gov/vuln/detail/CVE-2022-37450"
          ],
          "PublishedDate": "2022-08-05T21:15:00Z",
          "LastModifiedDate": "2022-08-12T18:23:00Z"
        },
        {
          "VulnerabilityID": "CVE-2022-23495",
          "PkgName": "github.com/ipfs/go-merkledag",
          "InstalledVersion": "v0.7.0",
          "FixedVersion": "0.8.1",
          "Layer": {
            "Digest": "sha256:3c600c06712f7dc77ccb68af1d7671303854c7a1094eb3b39db610d02688dde4",
            "DiffID": "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
          },
          "SeveritySource": "nvd",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2022-23495",
          "DataSource": {
            "ID": "go-vulndb",
            "Name": "The Go Vulnerability Database",
            "URL": "https://github.com/golang/vulndb"
          },
          "Title": "go-merkledag's ProtoNode may be modified such that common method calls may panic",
          "Description": "go-merkledag implements the 'DAGService' interface and adds two ipld node types, Protobuf and Raw for the ipfs project. A `ProtoNode` may be modified in such a way as to cause various encode errors which will trigger a panic on common method calls that don't allow for error returns. A `ProtoNode` should only be able to encode to valid DAG-PB, attempting to encode invalid DAG-PB forms will result in an error from the codec. Manipulation of an existing (newly created or decoded) `ProtoNode` using the modifier methods did not account for certain states that would place the `ProtoNode` into an unencodeable form. Due to conformance with the [`github.com/ipfs/go-block-format#Block`](https://pkg.go.dev/github.com/ipfs/go-block-format#Block) and [`github.com/ipfs/go-ipld-format#Node`](https://pkg.go.dev/github.com/ipfs/go-ipld-format#Node) interfaces, certain methods, which internally require a re-encode if state has changed, will panic due to the inability to return an error. This issue has been addressed across a number of pull requests. Users are advised to upgrade to version 0.8.1 for a complete set of fixes. Users unable to upgrade may attempt to mitigate this issue by sanitising inputs when allowing user-input to set a new `CidBuilder` on a `ProtoNode` and by sanitising `Tsize` (`Link#Size`) values such that they are a reasonable byte-size for sub-DAGs where derived from user-input.",
          "Severity": "HIGH",
          "CweIDs": [
            "CWE-252"
          ],
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "V3Score": 7.5
            },
            "nvd": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "V3Score": 7.5
            }
          },
          "References": [
            "https://en.wikipedia.org/wiki/Directed_acyclic_graph",
            "https://github.com/advisories/GHSA-x39j-h85h-3f46",
            "https://github.com/ipfs/go-merkledag/issues/90",
            "https://github.com/ipfs/go-merkledag/pull/91",
            "https://github.com/ipfs/go-merkledag/pull/92",
            "https://github.com/ipfs/go-merkledag/pull/93",
            "https://github.com/ipfs/go-merkledag/releases/tag/v0.8.0",
            "https://github.com/ipfs/go-merkledag/releases/tag/v0.8.1",
            "https://github.com/ipfs/go-merkledag/security/advisories/GHSA-x39j-h85h-3f46",
            "https://github.com/ipfs/kubo/issues/9297",
            "https://nvd.nist.gov/vuln/detail/CVE-2022-23495",
            "https://pkg.go.dev/vuln/GO-2022-1155"
          ],
          "PublishedDate": "2022-12-08T22:15:00Z",
          "LastModifiedDate": "2022-12-12T17:46:00Z"
        },
        {
          "VulnerabilityID": "GHSA-x39j-h85h-3f46",
          "PkgName": "github.com/ipfs/go-merkledag",
          "InstalledVersion": "v0.7.0",
          "FixedVersion": "v0.8.1",
          "Layer": {
            "Digest": "sha256:3c600c06712f7dc77ccb68af1d7671303854c7a1094eb3b39db610d02688dde4",
            "DiffID": "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
          },
          "PrimaryURL": "https://github.com/advisories/GHSA-x39j-h85h-3f46",
          "DataSource": {
            "ID": "glad",
            "Name": "GitLab Advisory Database Community",
            "URL": "https://gitlab.com/gitlab-org/advisories-community"
          },
          "Title": "Method calls may panic",
          "Description": "A `ProtoNode` may be modified in such a way as to cause various encode errors which will trigger a panic on common method calls that don't allow for error returns. A `ProtoNode` should only be able to encode to valid DAG-PB, attempting to encode invalid DAG-PB forms will result in an error from the codec. Manipulation of an existing (newly created or decoded) `ProtoNode` using the modifier methods did not account for certain states that would place the `ProtoNode` into an unencodeable form. Due to conformance with the `github.com/ipfs/go-block-format` and `github.com/ipfs/go-ipld-format` interfaces, certain methods, which internally require a re-encode if state has changed, will panic due to the inability to return an error. Additionally, use of the `ProtoNode#SetCidBuilder()` method to set a non-functioning `CidBuilder` (such as one that refers to a multihash where an implementation of that hash function is not available) may cause the same methods to panic as a new CID is required but cannot be created.",
          "Severity": "UNKNOWN",
          "References": [
            "https://github.com/advisories/GHSA-x39j-h85h-3f46",
            "https://github.com/ipfs/go-merkledag/issues/90",
            "https://github.com/ipfs/go-merkledag/pull/91",
            "https://github.com/ipfs/go-merkledag/pull/92",
            "https://github.com/ipfs/go-merkledag/pull/93",
            "https://github.com/ipfs/go-merkledag/releases/tag/v0.8.0",
            "https://github.com/ipfs/go-merkledag/releases/tag/v0.8.1",
            "https://github.com/ipfs/go-merkledag/security/advisories/GHSA-x39j-h85h-3f46",
            "https://github.com/ipfs/kubo/issues/9297"
          ]
        },
        {
          "VulnerabilityID": "CVE-2023-22460",
          "PkgName": "github.com/ipld/go-ipld-prime",
          "InstalledVersion": "v0.16.0",
          "FixedVersion": "0.19.0",
          "Layer": {
            "Digest": "sha256:3c600c06712f7dc77ccb68af1d7671303854c7a1094eb3b39db610d02688dde4",
            "DiffID": "sha256:f3bfc06f3a6dcd8b7372bb223ac10502e23fbcd8c3bcc61c7d18f7839ac0d215"
          },
          "SeveritySource": "nvd",
          "PrimaryURL": "https://avd.aquasec.com/nvd/cve-2023-22460",
          "DataSource": {
            "ID": "go-vulndb",
            "Name": "The Go Vulnerability Database",
            "URL": "https://github.com/golang/vulndb"
          },
          "Title": "go-ipld-prime/codec/json may panic if asked to encode bytes",
          "Description": "go-ipld-prime is an implementation of the InterPlanetary Linked Data (IPLD) spec interfaces, a batteries-included codec implementations of IPLD for CBOR and JSON, and tooling for basic operations on IPLD objects. Encoding data which contains a Bytes kind Node will pass a Bytes token to the JSON encoder which will panic as it doesn't expect to receive Bytes tokens. Such an encode should be treated as an error, as plain JSON should not be able to encode Bytes. This only impacts uses of the `json` codec. `dag-json` is not impacted. Use of `json` as a decoder is not impacted. This issue is fixed in v0.19.0. As a workaround, one may prefer the `dag-json` codec, which has the ability to encode bytes.",
          "Severity": "HIGH",
          "CweIDs": [
            "CWE-20"
          ],
          "CVSS": {
            "ghsa": {
              "V3Vector": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "V3Score": 5.9
            },
            "nvd": {
              "V3Vector": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H",
              "V3Score": 7.5
            }
          },
          "References": [
            "https://github.com/advisories/GHSA-c653-6hhg-9x92",
            "https://github.com/ipld/go-ipld-prime/pull/472",
            "https://github.com/ipld/go-ipld-prime/releases/tag/v0.19.0",
            "https://github.com/ipld/go-ipld-prime/security/advisories/GHSA-c653-6hhg-9x92",
            "https://nvd.nist.gov/vuln/detail/CVE-2023-22460",
            "https://pkg.go.dev/vuln/GO-2023-1269"
          ],
          "PublishedDate": "2023-01-04T15:15:00Z",
          "LastModifiedDate": "2023-01-10T19:29:00Z"
        }
      ]
    }
  ]
}
